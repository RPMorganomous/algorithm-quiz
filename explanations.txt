Q1)  I wanted to make this a simple as possible, so I check each letter in t against s and build a string of all matching characters.  I can avoid any further computations if I find there are not at least 2 matching characters.  I used the permutations function of the itertools library to create all possible permutations of the new string because it's really efficent with memory and speed.  Still, assuming that our positive test case must include all the letters in order to be a true anagram, it takes O(n!) time to do that.  Next I check to see if any of the permutations exist in s and return the result = O(n(s*t)).